---
layout: post
title: Django web开发指南阅读笔记(一)
categories: [Django]
---

##SQL和关系数据库

在早期的web里,内容都是手工编写的HTML,一般都是保存在文件系统上,像这样的被称之为静态内容.静态页面生成器很多,比如静态博客生成器里有大名鼎鼎的Pelican.之所以称为"静态",是因为同样的URL请求,返回的信息总是一样的.现今,大多数的网站都是动态的,因为一个给定的URL可以根据参数的不同返回完全不一样的结果.

这种动态特性主要是通过将数据保存在数据库中实现的,在数据库中,数据不在是简单的一个文本字符串了,你可以创建多个组成部分的数据,将它们连在一起来表达其中的相互关系.SQL(结构化查询数据语言)是一种用来定义和查询数据库的语言,通常被进一步抽象为一个ORM(对象关系映射),它可以将数据库中的数据映射为面向对象语言里的代码关系.

SQL数据库按照表(table)的形式来组织,每张表则由行(row,例如条目,对象)和列(column,属性,变量)组成,基本上和数据表格很相似.Django提供了一个强大的ORM机制,Python的类就代表了表,对象代表了其中的每一行,而对象的属性则代表了列.

##Django分层

Django遵循分层原则,不过在做法上跟常规的MVC却略有不同.首先模型部分保持不变,Django的模型层只负责传入传出数据.Django里的视图并不是数据显示的最后一部,Django里的视图其实更接近MVC里传统意义上的控制器.视图是用来将模型层和表示层(由HTML和Django的模板语言组成)连接在一起的Python函数.

换一种说法,Django把表示层一分为二,视图方法定义了要显示模型离的什么数据,而模板则定义了最终信息的显示方式.Django框架自己则充当了控制器的角色,它提供了决定什么视图和什么模板一起响应给定请求的机制.

下面是自己对Django的MVC(MTV)的理解:

![2014-10-03-django-web-guide-development-notes-one-1]({{ site.url }}/images/posts/2014-10-03-django-web-guide-development-notes-one-1.png)



